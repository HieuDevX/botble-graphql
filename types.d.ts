/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import {core, connectionPluginCore} from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<'inputTypes', TypeName, FieldName>
      >,
    ): void; // "Date";
    time<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<'inputTypes', TypeName, FieldName>
      >,
    ): void; // "Time";
    datetime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<'inputTypes', TypeName, FieldName>
      >,
    ): void; // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "Date";
    time<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "Time";
    datetime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>,
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  Category: {
    // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  };
  Gallery: {
    // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  };
  Post: {
    // root type
    content?: string | null; // String
    description?: string | null; // String
    id: string; // ID!
    image?: string | null; // String
    name: string; // String!
    slug: string; // String!
  };
  Query: {};
  Tag: {
    // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  };
  Node:
    | NexusGenRootTypes['Post']
    | NexusGenRootTypes['Category']
    | NexusGenRootTypes['Gallery']
    | NexusGenRootTypes['Tag'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
  DateTime: any;
  Time: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {}

export interface NexusGenFieldTypes {
  Category: {
    // field return type
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  };
  Gallery: {
    // field return type
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  };
  Post: {
    // field return type
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    content: string | null; // String
    createdAt: any; // DateTime!
    description: string | null; // String
    id: string; // ID!
    image: string | null; // String
    name: string; // String!
    slug: string; // String!
  };
  Query: {
    // field return type
    featuredListing: NexusGenRootTypes['Post'][]; // [Post!]!
  };
  Tag: {
    // field return type
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  };
  Node: {
    // field return type
    id: string; // ID!
  };
}

export interface NexusGenArgTypes {
  Query: {
    featuredListing: {
      // args
      limit?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {
  Node: 'Post' | 'Category' | 'Gallery' | 'Tag';
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | 'Category'
  | 'Gallery'
  | 'Post'
  | 'Query'
  | 'Tag';

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = 'Node';

export type NexusGenScalarNames =
  | 'Boolean'
  | 'Date'
  | 'DateTime'
  | 'Float'
  | 'ID'
  | 'Int'
  | 'String'
  | 'Time';

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
